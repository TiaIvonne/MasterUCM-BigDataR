mtry=6,
importance = 'impurity',
write.forest = TRUE,
min.node.size = 1,
splitrule = "gini",
verbose = TRUE,
classification = TRUE,
seed=1234
)
print(fit)
predictions_train <- predict(fit, data = trainset)
confusionMatrix(table( trainset$status_group, predictions_train$predictions))
predictions_concurso <- predict(fit, data = testset)
resultados_concurso<- as.data.frame(cbind( testset$id,predictions_concurso$predictions))
names(resultados_concurso)<-c("id", "status_group")
resultados_concurso$status_group<-ifelse(resultados_concurso$status_group==0,"functional", ifelse(resultados_concurso$status_group==1,"functional needs repair","non functional"))
# Crea archivo para subir a DataDriven
fwrite(resultados_concurso, file = "results_model1.csv")
vars_imp <- fit$variable.importance
vars_imp <- as.data.frame(vars_imp)
vars_imp$myvar <- rownames(vars_imp)
vars_imp <- as.data.table(vars_imp)
setorder(vars_imp, -vars_imp)
ggbarplot(vars_imp,
x = "myvar", y = "vars_imp",
#fill  = 'myvar',
color = "blue",
palette = "jco",
sort.val = "asc",
sort.by.groups = FALSE,
x.text.angle = 90,
ylab = "Importancia",
xlab = 'Variable',
#legend.title = "MPG Group",
rotate = TRUE,
ggtheme = theme_minimal()
)
# Library loading
rm(list = ls())
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(caret)
library(scales)
library(ggplot2)
library(stringi)
library(stringr)
library(dataPreparation)
library(knitr)
library(kableExtra)
library(ggpubr)
library(tictoc)
library(ggeasy)
library(lubridate)
library(inspectdf)
library(ranger)
library(gbm)
})
# Data Loading
#Fichero datos train
vtrain <- fread("train_set.csv")
vtrain$flag <- 1 # Columna que indica si es parte del set train (1) test (0)
#Fichero datos test
vtest <- fread("test_set.csv")
vtest$flag <- 0 # Columna que indica si es parte del set train (1) test (0)
#Fichero con labels o objetivo
vlabels <-fread("labels.csv")
# Se unen las labels con el set de datos train
train <- merge(vlabels, vtrain)
# Se unen ambos datasets (train y test) lo cual es lo recomendado para mas adelante trabajar en Feature engineering
datos <- as.data.table(rbind(vtrain, vtest))
#Comprobacion
head(datos)
head(vlabels)
#Distribucion de los datos
str(datos)
cuenta <- vlabels %>% count(status_group)
porcentaje <- round( prop.table(table(vlabels$status_group))*100, 2)
kable(cuenta, col.names = c('status_group', 'count'))
kable(porcentaje, col.names = c('status_group', '%'))
barplot(porcentaje, col=rgb(0.2,0.4,0.6,0.6))
# categorical plot
x <- inspect_cat(datos)
show_plot(x)
# correlations in numeric columns
x <- inspect_cor(datos)
show_plot(x)
# feature imbalance bar plot
x <- inspect_imb(datos)
show_plot(x)
# memory usage barplot
x <- inspect_mem(datos)
show_plot(x)
# missingness barplot
x <- inspect_na(datos)
show_plot(x)
# histograms for numeric columns
x <- inspect_num(datos)
show_plot(x)
# barplot of column types
x <- inspect_types(datos)
show_plot(x)
# Remueve atributos que no se usaran
datos$num_private <- NULL
datos$amount_tsh <- NULL
datos$wpt_name <- NULL
datos$subvillage <- NULL
datos$region_code <- NULL
datos$lga <- NULL
datos$ward <- NULL
datos$recorded_by <- NULL
datos$scheme_name <- NULL
datos$permit <- NULL
datos$extraction_type <- NULL
datos$extraction_type_class <- NULL
datos$management_group <- NULL
datos$quality_group <- NULL
datos$quantity_group <- NULL
datos$waterpoint_type_group <- NULL
datos$source_type <- NULL
datos$date_recorded <- NULL
datos$district_code <- NULL
datos$payment_type <- NULL
x <- inspect_types(datos)
show_plot(x)
x <- inspect_na(datos)
show_plot(x)
table(datos$public_meeting)
datos$fe_public_meeting<- ifelse(is.na(datos$public_meeting), FALSE, datos$public_meeting)
datos$fe_public_meeting_missing<-ifelse(is.na(datos$public_meeting), 1,0)
# Eliminacion de variable original
datos$public_meeting <- NULL
# Syntax
temp <- datos %>% mutate_at(vars(-c(flag)), ~na_if(., 0))
#
x <- inspect_na(temp)
show_plot(x)
temp[is.na(temp)] <- 0
head(temp)
temp$fe_construction_year<-round(ifelse(temp$construction_year==0, mean(temp$construction_year[temp$construction_year>0]),temp$construction_year), 0)
#Combinacion de latitud y longitud
temp$fe_lonlat  <- sqrt(temp$longitude^2 + temp$latitude^2)
year <- year(now())
temp$fe_antiguedad <- (year - temp$fe_construction_year)
temp$construction_year <- NULL
# Categoricas
categoricas <- names(temp[, which(sapply(temp, is.character)), with = FALSE])
#-Frecuencias
freq_inicial <- apply(temp[, ..categoricas], 2, function(x) length(unique(x)))
freq_inicial
cfunder<-unique(temp[ , .(.N), by = .(funder)][order(-N)])
cfunder$perc<-cfunder$N/length(temp$funder)*100
temp[ , fe_funder := .N , by = .(funder)]
temp$funder <- NULL # elimina feature
cinstaller<-unique(temp[ , .(.N), by = .(installer)][order(-N)])
cinstaller$perc<-cinstaller$N/length(temp$installer)*100
temp[ ,fe_installer := .N , by = .(installer)]
temp$installer <- NULL # elimina feature
cbasin<-unique(temp[ , .(.N), by = .(basin)][order(-N)])
cbasin$perc<-cbasin$N/length(temp$basin)*100
temp[ ,fe_basin := .N , by = .(basin)]
temp$basin <- NULL # elimina feature
cregion<-unique(temp[ , .(.N), by = .(region)][order(-N)])
cregion$perc<-cregion$N/length(temp$region)*100
temp[ ,fe_region := .N , by = .(region)]
temp$region <- NULL # elimina feature
cscheme<-unique(temp[ , .(.N), by = .(scheme_management)][order(-N)])
cscheme$perc<-cscheme$N/length(temp$scheme_management)*100
temp[ ,fe_scheme := .N , by = .(scheme_management)]
temp$scheme_management <- NULL # elimina feature
cextraction<-unique(temp[ , .(.N), by = .(extraction_type_group)][order(-N)])
cextraction$perc<-cextraction$N/length(temp$extraction_type_group)*100
temp[ ,fe_extract := .N , by = .(extraction_type_group)]
temp$extraction_type_group <- NULL # elimina feature
cmanagement<-unique(temp[ , .(.N), by = .(management)][order(-N)])
cmanagement$perc<-cmanagement$N/length(temp$management)*100
temp[ ,fe_management := .N , by = .(management)]
temp$management <- NULL # elimina feature
cpayment<-unique(temp[ , .(.N), by = .(payment)][order(-N)])
cpayment$perc<-cpayment$N/length(temp$payment)*100
temp[ ,fe_payment := .N , by = .(payment)]
temp$payment <- NULL # elimina feature
cwater<-unique(temp[ , .(.N), by = .(water_quality)][order(-N)])
cwater$perc<-cwater$N/length(temp$cwater)*100
temp[ ,fe_water_quality := .N , by = .(water_quality)]
temp$water_quality <- NULL # elimina feature
cquantity<-unique(temp[ , .(.N), by = .(quantity)][order(-N)])
cquantity$perc<-cquantity$N/length(temp$quantity)*100
temp[ ,fe_quantity := .N , by = .(quantity)]
temp$quantity <- NULL # elimina feature
csource<-unique(temp[ , .(.N), by = .(source)][order(-N)])
csource$perc<-csource$N/length(temp$source)*100
temp[ ,fe_source := .N , by = .(source)]
temp$source <- NULL # elimina feature
csource_c<-unique(temp[ , .(.N), by = .(source_class)][order(-N)])
csource_c$perc<-csource_c$N/length(temp$source_class)*100
temp[ ,fe_source_class := .N , by = .(source_class)]
temp$source_class <- NULL # elimina feature
cwaterpoint<-unique(temp[ , .(.N), by = .(waterpoint_type)][order(-N)])
cwaterpoint$perc<-cwaterpoint$N/length(temp$waterpoint_type)*100
temp[ ,fe_waterpoint_type := .N , by = .(waterpoint_type)]
temp$waterpoint_type <- NULL # elimina feature
# Separa train y test segun su flag
trainset<-temp[temp$flag==1,]
#table(trainset$flag) comprobacion
testset<-temp[temp$flag==0,]
# Se combina el train set con la variable objetivo
trainset <- merge(trainset, vlabels, by ='id', sort = FALSE)
# Elimina la columna flag y la columna id
trainset$flag <- NULL
testset$flag <- NULL
trainset$id <-NULL
trainset = trainset %>%
mutate(status_group = ifelse(status_group== "functional", 0,
ifelse(status_group == "functional needs repair",1 , 2)))
table(trainset$status_group)
fit <- ranger(status_group ~. ,
data = trainset,
num.trees = 300,
mtry=6,
importance = 'impurity',
write.forest = TRUE,
min.node.size = 1,
splitrule = "gini",
verbose = TRUE,
classification = TRUE,
seed=1234
)
print(fit)
predictions_train <- predict(fit, data = trainset)
confusionMatrix(table( trainset$status_group, predictions_train$predictions))
predictions_concurso <- predict(fit, data = testset)
resultados_concurso<- as.data.frame(cbind( testset$id,predictions_concurso$predictions))
names(resultados_concurso)<-c("id", "status_group")
resultados_concurso$status_group<-ifelse(resultados_concurso$status_group==0,"functional",
ifelse(resultados_concurso$status_group==1,"functional needs repair","non functional"))
#Se guarda en el fichero que se subirÃ¡ a la plataforma -->
fwrite(resultados_concurso, file = "results_model2.csv")
vars_imp <- fit$variable.importance
vars_imp <- as.data.frame(vars_imp)
vars_imp$myvar <- rownames(vars_imp)
vars_imp <- as.data.table(vars_imp)
setorder(vars_imp, -vars_imp)
ggbarplot(vars_imp,
x = "myvar", y = "vars_imp",
#fill  = 'myvar',
color = "blue",
palette = "jco",
sort.val = "asc",
sort.by.groups = FALSE,
x.text.angle = 90,
ylab = "Importancia",
xlab = 'Variable',
#legend.title = "MPG Group",
rotate = TRUE,
ggtheme = theme_minimal()
)
# Library loading
rm(list = ls())
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(caret)
library(scales)
library(ggplot2)
library(stringi)
library(stringr)
library(dataPreparation)
library(knitr)
library(kableExtra)
library(ggpubr)
library(tictoc)
library(ggeasy)
library(lubridate)
library(inspectdf)
library(ranger)
library(gbm)
library(MLmetrics)
})
# Data Loading
#Fichero datos train
vtrain <- fread("train_set.csv")
vtrain$flag <- 1 # Columna que indica si es parte del set train (1) test (0)
#Fichero datos test
vtest <- fread("test_set.csv")
vtest$flag <- 0 # Columna que indica si es parte del set train (1) test (0)
#Fichero con labels o objetivo
vlabels <-fread("labels.csv")
# Se unen las labels con el set de datos train
train <- merge(vlabels, vtrain)
# Se unen ambos datasets (train y test) lo cual es lo recomendado para mas adelante trabajar en Feature engineering
datos <- as.data.table(rbind(vtrain, vtest))
#ComprobaciÃ³n
head(datos)
head(vlabels)
#DistribuciÃ³n de los datos
str(datos)
cuenta <- vlabels %>% count(status_group)
porcentaje <- round( prop.table(table(vlabels$status_group))*100, 2)
kable(cuenta, col.names = c('status_group', 'count'))
kable(porcentaje, col.names = c('status_group', '%'))
barplot(porcentaje, col=rgb(0.2,0.4,0.6,0.6))
# categorical plot
x <- inspect_cat(datos)
show_plot(x)
# correlations in numeric columns
x <- inspect_cor(datos)
show_plot(x)
# feature imbalance bar plot
x <- inspect_imb(datos)
show_plot(x)
# memory usage barplot
x <- inspect_mem(datos)
show_plot(x)
# missingness barplot
x <- inspect_na(datos)
show_plot(x)
# histograms for numeric columns
x <- inspect_num(datos)
show_plot(x)
# barplot of column types
x <- inspect_types(datos)
show_plot(x)
# Remueve atributos que no se usaran
names(datos)
#Quita las numericas que no han tenido gran incidencia en modelos anteriores
datos$amount_tsh <- NULL
datos$num_private <- NULL
datos$region_code <- NULL
datos$district_code <-NULL
#Quita algunas adicionales
datos$date_recorded <- NULL
datos$recorded_by <- NULL
datos$permit <- NULL
datos$public_meeting <-NULL
datos$extraction_type_class <-NULL
datos$waterpoint_type_group <- NULL
x <- inspect_types(datos)
show_plot(x)
x <- inspect_na(datos)
show_plot(x)
# Syntax
temp <- datos %>% mutate_at(vars(-c(flag)), ~na_if(., 0))
#
x <- inspect_na(temp)
show_plot(x)
temp[is.na(temp)] <- 0
head(temp)
temp$fe_construction_year<-round(ifelse(temp$construction_year==0, mean(temp$construction_year[temp$construction_year>0]),temp$construction_year), 0)
#Combinacion de latitud y longitud
temp$fe_lonlat  <- sqrt(temp$longitude^2 + temp$latitude^2)
year <- year(now())
temp$fe_antiguedad <- (year - temp$fe_construction_year)
temp$construction_year <- NULL
temp$fe_population<-round(ifelse(temp$population==0, mean(temp$population[temp$population>0]),temp$population), 0)
temp$population <- NULL
# Categoricas
categoricas <- names(temp[, which(sapply(temp, is.character)), with = FALSE])
#-Frecuencias
freq_inicial <- apply(temp[, ..categoricas], 2, function(x) length(unique(x)))
freq_inicial
cfunder<-unique(temp[ , .(.N), by = .(funder)][order(-N)])
cfunder$perc<-cfunder$N/length(temp$funder)*100
temp[ , fe_funder := .N , by = .(funder)]
temp$funder <- NULL # elimina feature
cinstaller<-unique(temp[ , .(.N), by = .(installer)][order(-N)])
cinstaller$perc<-cinstaller$N/length(temp$installer)*100
temp[ ,fe_installer := .N , by = .(installer)]
temp$installer <- NULL # elimina feature
cwpt<-unique(temp[ , .(.N), by = .(wpt_name)][order(-N)])
cwpt$perc<-cwpt$N/length(temp$wpt_name)*100
temp[ ,fe_wpt_name := .N , by = .(wpt_name)]
temp$wpt_name <- NULL # elimina feature
cbasin<-unique(temp[ , .(.N), by = .(basin)][order(-N)])
cbasin$perc<-cbasin$N/length(temp$basin)*100
temp[ ,fe_basin := .N , by = .(basin)]
temp$basin <- NULL # elimina feature
csubvillage<-unique(temp[ , .(.N), by = .(subvillage)][order(-N)])
csubvillage$perc<-csubvillage$N/length(temp$subvillage)*100
temp[ ,fe_subvillage := .N , by = .(subvillage)]
temp$subvillage <- NULL # elimina feature
cregion<-unique(temp[ , .(.N), by = .(region)][order(-N)])
cregion$perc<-cregion$N/length(temp$region)*100
temp[ ,fe_region := .N , by = .(region)]
temp$region <- NULL # elimina feature
clga<-unique(temp[ , .(.N), by = .(lga)][order(-N)])
clga$perc<-clga$N/length(temp$lga)*100
temp[ ,fe_lga := .N , by = .(lga)]
temp$lga <- NULL # elimina feature
cward<-unique(temp[ , .(.N), by = .(ward)][order(-N)])
cward$perc<-cward$N/length(temp$ward)*100
temp[ ,fe_ward := .N , by = .(ward)]
temp$ward<- NULL # elimina feature
cscheme<-unique(temp[ , .(.N), by = .(scheme_management)][order(-N)])
cscheme$perc<-cscheme$N/length(temp$scheme_management)*100
temp[ ,fe_scheme := .N , by = .(scheme_management)]
temp$scheme_management <- NULL # elimina feature
cscheme_name<-unique(temp[ , .(.N), by = .(scheme_name)][order(-N)])
cscheme_name$perc<-cscheme_name$N/length(temp$scheme_name)*100
temp[ ,fe_scheme_name := .N , by = .(scheme_name)]
temp$scheme_name <- NULL # elimina feature
cextraction_type<-unique(temp[ , .(.N), by = .(extraction_type)][order(-N)])
cextraction_type$perc<-cextraction_type$N/length(temp$extraction_type)*100
temp[ ,fe_extract_type := .N , by = .(extraction_type)]
temp$extraction_type <- NULL # elimina feature
cextraction<-unique(temp[ , .(.N), by = .(extraction_type_group)][order(-N)])
cextraction$perc<-cextraction$N/length(temp$extraction_type_group)*100
temp[ ,fe_extract := .N , by = .(extraction_type_group)]
temp$extraction_type_group <- NULL # elimina feature
cmanagement<-unique(temp[ , .(.N), by = .(management)][order(-N)])
cmanagement$perc<-cmanagement$N/length(temp$management)*100
temp[ ,fe_management := .N , by = .(management)]
temp$management <- NULL # elimina feature
cmanagementg<-unique(temp[ , .(.N), by = .(management_group)][order(-N)])
cmanagementg$perc<-cmanagementg$N/length(temp$management_group)*100
temp[ ,fe_management_g := .N , by = .(management_group)]
temp$management_group <- NULL # elimina feature
cpayment<-unique(temp[ , .(.N), by = .(payment)][order(-N)])
cpayment$perc<-cpayment$N/length(temp$payment)*100
temp[ ,fe_payment := .N , by = .(payment)]
temp$payment <- NULL # elimina feature
cpayment_t<-unique(temp[ , .(.N), by = .(payment_type)][order(-N)])
cpayment_t$perc<-cpayment$N/length(temp$payment_type)*100
temp[ ,fe_payment := .N , by = .(payment_type)]
temp$payment_type <- NULL # elimina feature
cwater<-unique(temp[ , .(.N), by = .(water_quality)][order(-N)])
cwater$perc<-cwater$N/length(temp$cwater)*100
temp[ ,fe_water_quality := .N , by = .(water_quality)]
temp$water_quality <- NULL # elimina feature
cquality_group<-unique(temp[ , .(.N), by = .(quality_group)][order(-N)])
cquality_group$perc<-cquality_group$N/length(temp$quality_group)*100
temp[ ,fe_quality_group := .N , by = .(quality_group)]
temp$quality_group <- NULL # elimina feature
cquantity<-unique(temp[ , .(.N), by = .(quantity)][order(-N)])
cquantity$perc<-cquantity$N/length(temp$quantity)*100
temp[ ,fe_quantity := .N , by = .(quantity)]
temp$quantity <- NULL # elimina feature
cquantity_g<-unique(temp[ , .(.N), by = .(quantity_group)][order(-N)])
cquantity_g$perc<-cquantity_g$N/length(temp$quantity_group)*100
temp[ ,fe_quantity_group := .N , by = .(quantity_group)]
temp$quantity_group <- NULL # elimina feature
csource<-unique(temp[ , .(.N), by = .(source)][order(-N)])
csource$perc<-csource$N/length(temp$source)*100
temp[ ,fe_source := .N , by = .(source)]
temp$source <- NULL # elimina feature
csource_ct<-unique(temp[ , .(.N), by = .(source_type)][order(-N)])
csource_ct$perc<-csource_ct$N/length(temp$source_type)*100
temp[ ,fe_source_type := .N , by = .(source_type)]
temp$source_type <- NULL # elimina feature
csource_c<-unique(temp[ , .(.N), by = .(source_class)][order(-N)])
csource_c$perc<-csource_c$N/length(temp$source_class)*100
temp[ ,fe_source_class := .N , by = .(source_class)]
temp$source_class <- NULL # elimina feature
cwaterpoint<-unique(temp[ , .(.N), by = .(waterpoint_type)][order(-N)])
cwaterpoint$perc<-cwaterpoint$N/length(temp$waterpoint_type)*100
temp[ ,fe_waterpoint_type := .N , by = .(waterpoint_type)]
temp$waterpoint_type <- NULL # elimina feature
# Separa train y test segun su flag
trainset<-temp[temp$flag==1,]
#table(trainset$flag) comprobacion
testset<-temp[temp$flag==0,]
# Se combina el train set con la variable objetivo
trainset <- merge(trainset, vlabels, by ='id', sort = FALSE)
# Elimina la columna flag y la columna id
trainset$flag <- NULL
testset$flag <- NULL
trainset$id <-NULL
trainset = trainset %>%
mutate(status_group = ifelse(status_group== "functional", 0,
ifelse(status_group == "functional needs repair",1 , 2)))
table(trainset$status_group)
fit <- ranger(status_group ~. ,
data = trainset,
num.trees = 300,
mtry=6,
importance = 'impurity',
write.forest = TRUE,
min.node.size = 1,
splitrule = "gini",
verbose = TRUE,
classification = TRUE,
seed=1234
)
print(fit)
predictions_train <- predict(fit, data = trainset)
confusionMatrix(table( trainset$status_group, predictions_train$predictions))
predictions_concurso <- predict(fit, data = testset)
resultados_concurso<- as.data.frame(cbind( testset$id,predictions_concurso$predictions))
names(resultados_concurso)<-c("id", "status_group")
resultados_concurso$status_group<-ifelse(resultados_concurso$status_group==0,"functional",
ifelse(resultados_concurso$status_group==1,"functional needs repair","non functional"))
#Se guarda en el fichero que se subirÃ¡ a la plataforma -->
fwrite(resultados_concurso, file = "results_model3.csv")
vars_imp <- fit$variable.importance
vars_imp <- as.data.frame(vars_imp)
vars_imp$myvar <- rownames(vars_imp)
vars_imp <- as.data.table(vars_imp)
setorder(vars_imp, -vars_imp)
ggbarplot(vars_imp,
x = "myvar", y = "vars_imp",
#fill  = 'myvar',
color = "blue",
palette = "jco",
sort.val = "asc",
sort.by.groups = FALSE,
x.text.angle = 90,
ylab = "Importancia",
xlab = 'Variable',
#legend.title = "MPG Group",
rotate = TRUE,
ggtheme = theme_minimal()
)
